
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package org.example.invoiceservice;

import java.util.logging.Logger;

import javax.naming.ConfigurationException;

import com.amazonaws.services.dynamodb.AmazonDynamoDB;
import com.amazonaws.services.dynamodb.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodb.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodb.datamodeling.PaginatedScanList;
import com.amazonaws.services.dynamodb.model.AttributeValue;
import com.amazonaws.services.dynamodb.model.ComparisonOperator;
import com.amazonaws.services.dynamodb.model.Condition;

import si.fri.aws.dynamodb.DynamoDBHelper;
import si.fri.aws.dynamodb.InvoiceEntityType;

/**
 * This class was generated by Apache CXF 2.7.0
 * 2012-12-03T19:06:05.249+01:00
 * Generated source version: 2.7.0
 * 
 */

@javax.jws.WebService(
                      serviceName = "InvoiceService",
                      portName = "InvoiceServiceSOAP",
                      targetNamespace = "http://www.example.org/InvoiceService/",
                      wsdlLocation = "http://www.example.org/?wsdl",
                      endpointInterface = "org.example.invoiceservice.InvoiceService")
                      
public class InvoiceServiceImpl implements InvoiceService {

    private static final Logger LOG = Logger.getLogger(InvoiceServiceImpl.class.getName());
	private static final String ENDPOINT_URL="https://dynamodb.eu-west-1.amazonaws.com";
	private static final Boolean ENABLE_ERROR_RETRY=true;
	
    //function to convert ws shema entity into dynamo persistent Entity
    private si.fri.aws.dynamodb.InvoiceEntityType convertToDynamoEntity(org.example.businessschemas.InvoiceEntityType wsEntity){
        si.fri.aws.dynamodb.InvoiceEntityType dynamoEntity=new si.fri.aws.dynamodb.InvoiceEntityType();
        dynamoEntity.setBarcode(wsEntity.getBarcode());
        dynamoEntity.setPrice(wsEntity.getPrice());
        return dynamoEntity;
    }	
    
    /* (non-Javadoc)
     * @see org.example.invoiceservice.InvoiceService#getInvoice(org.example.messages.GetInvoiceRequestType  getInvoiceInput )*
     */
    public org.example.messages.GetInvoiceResponseType getInvoice(org.example.messages.GetInvoiceRequestType getInvoiceInput) throws GetInvoiceFault    { 
        LOG.info("Executing operation getInvoice");
        System.out.println(getInvoiceInput);
        try {
            org.example.messages.GetInvoiceResponseType _return = new org.example.messages.GetInvoiceResponseType();
            org.example.businessschemas.InvoiceEntityType _returnInvoice = new org.example.businessschemas.InvoiceEntityType();
            
            AmazonDynamoDB dynamo=DynamoDBHelper.createClient(ENABLE_ERROR_RETRY, ENDPOINT_URL);
            DynamoDBMapper mapper = new DynamoDBMapper(dynamo);
            DynamoDBScanExpression scanExpression = new DynamoDBScanExpression();
            scanExpression.addFilterCondition("barcode", 
                    new Condition()
                       .withComparisonOperator(ComparisonOperator.EQ)
                       .withAttributeValueList(new AttributeValue().withS(getInvoiceInput.getInvoice().getBarcode())));
            PaginatedScanList<InvoiceEntityType> r = mapper.scan(si.fri.aws.dynamodb.InvoiceEntityType.class, scanExpression);
            if (r.isEmpty()) {
				org.example.messages.GetInvoiceFaultType fault = new org.example.messages.GetInvoiceFaultType();
				org.example.businessschemas.InvoiceFaultType error = new org.example.businessschemas.InvoiceFaultType();
				error.setCode("GET");
				error.setDescription("No items found.");
				fault.setFault(error);
				throw new GetInvoiceFault("error", fault);            	
            }           
            
            _returnInvoice.setBarcode(r.get(0).getBarcode());
            _returnInvoice.setPrice(r.get(0).getPrice());
            _return.setInvoice(_returnInvoice);
            return _return;
        } catch(ConfigurationException ce){
        	throw new GetInvoiceFault("Credentials configuration error");
        } catch (GetInvoiceFault ex) {
        	ex.printStackTrace();
        	throw new GetInvoiceFault(ex.getMessage(), ex.getFaultInfo(), ex.getCause());
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new GetInvoiceFault("getInvoiceFault...");
    }

    /* (non-Javadoc)
     * @see org.example.invoiceservice.InvoiceService#addInvoice(org.example.messages.AddInvoiceRequestType  addInvoiceInput )*
     */
    public org.example.messages.AddInvoiceResponseType addInvoice(org.example.messages.AddInvoiceRequestType addInvoiceInput) throws AddInvoiceFault    { 
        LOG.info("Executing operation addInvoice");
        System.out.println(addInvoiceInput);
        try {
            org.example.messages.AddInvoiceResponseType _return = new org.example.messages.AddInvoiceResponseType();
                        
            AmazonDynamoDB dynamo=DynamoDBHelper.createClient(ENABLE_ERROR_RETRY, ENDPOINT_URL);
            DynamoDBMapper mapper = new DynamoDBMapper(dynamo);
            si.fri.aws.dynamodb.InvoiceEntityType dynamoEntity=convertToDynamoEntity(addInvoiceInput.getInvoice());
            mapper.save(dynamoEntity);
            
            _return.setStatus(dynamoEntity.getId());
            return _return;
        } catch(ConfigurationException ce){
        	throw new AddInvoiceFault("Credentials configuration error");
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new AddInvoiceFault("addInvoiceFault...");
    }

    /* (non-Javadoc)
     * @see org.example.invoiceservice.InvoiceService#deleteInvoice(org.example.messages.DeleteInvoiceRequestType  deleteInvoiceInput )*
     */
    public org.example.messages.DeleteInvoiceResponseType deleteInvoice(org.example.messages.DeleteInvoiceRequestType deleteInvoiceInput) throws DeleteInvoiceFault    { 
        LOG.info("Executing operation deleteInvoice");
        System.out.println(deleteInvoiceInput);
        try {
            org.example.messages.DeleteInvoiceResponseType _return = new org.example.messages.DeleteInvoiceResponseType();
            
            AmazonDynamoDB dynamo=DynamoDBHelper.createClient(ENABLE_ERROR_RETRY, ENDPOINT_URL);
            DynamoDBMapper mapper = new DynamoDBMapper(dynamo);
            si.fri.aws.dynamodb.InvoiceEntityType dynamoEntity = mapper.load(si.fri.aws.dynamodb.InvoiceEntityType.class, deleteInvoiceInput.getInvoiceId());
            if (dynamoEntity == null) {
				org.example.messages.DeleteInvoiceFaultType fault = new org.example.messages.DeleteInvoiceFaultType();
				org.example.businessschemas.InvoiceFaultType error = new org.example.businessschemas.InvoiceFaultType();
				error.setCode("DELETE");
				error.setDescription("ID does not exists: "+deleteInvoiceInput.getInvoiceId());
				fault.setFault(error);
				throw new DeleteInvoiceFault("error", fault);
            }
            mapper.delete(dynamoEntity);
            
            _return.setStatus(dynamoEntity.getId());
            return _return;
        } catch(ConfigurationException ce){
        	throw new DeleteInvoiceFault("Credentials configuration error");
        } catch (DeleteInvoiceFault ex) {
        	ex.printStackTrace();
        	throw new DeleteInvoiceFault(ex.getMessage(), ex.getFaultInfo(), ex.getCause());
        } catch (java.lang.Exception ex) {
            ex.printStackTrace();
            throw new RuntimeException(ex);
        }
        //throw new DeleteInvoiceFault("deleteInvoiceFault...");
    }

}
